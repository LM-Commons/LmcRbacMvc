"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[107],{2618:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=i(4848),t=i(8453);const r={sidebar_position:7},o="Using the Authorization Service",a={id:"using-the-authorization-service",title:"Using the Authorization Service",description:"This section will teach you how to use the AuthorizationService to its full extent.",source:"@site/docs/using-the-authorization-service.md",sourceDirName:".",slug:"/using-the-authorization-service",permalink:"/lmc-rbac-mvc/docs/using-the-authorization-service",draft:!1,unlisted:!1,editUrl:"https://github.com/lm-commons/lmcrbacmvc/tree/master/docs/docs/using-the-authorization-service.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Strategies",permalink:"/lmc-rbac-mvc/docs/strategies"},next:{title:"Cookbook",permalink:"/lmc-rbac-mvc/docs/cookbook"}},c={},l=[{value:"Injecting the Authorization Service",id:"injecting-the-authorization-service",level:2},{value:"Using initializers",id:"using-initializers",level:3},{value:"Using delegator factory",id:"using-delegator-factory",level:3},{value:"Using Factories",id:"using-factories",level:3},{value:"Permissions and Assertions",id:"permissions-and-assertions",level:2},{value:"Defining assertions",id:"defining-assertions",level:3},{value:"Defining the assertion map",id:"defining-the-assertion-map",level:3},{value:"Checking permissions in a service",id:"checking-permissions-in-a-service",level:3},{value:"Checking permissions in controllers and views",id:"checking-permissions-in-controllers-and-views",level:3},{value:"In a controller :",id:"in-a-controller-",level:4},{value:"In a view :",id:"in-a-view-",level:4},{value:"Defining additional permissions",id:"defining-additional-permissions",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"using-the-authorization-service",children:"Using the Authorization Service"}),"\n",(0,s.jsx)(n.p,{children:"This section will teach you how to use the AuthorizationService to its full extent."}),"\n",(0,s.jsx)(n.h2,{id:"injecting-the-authorization-service",children:"Injecting the Authorization Service"}),"\n",(0,s.jsx)(n.h3,{id:"using-initializers",children:"Using initializers"}),"\n",(0,s.jsxs)(n.p,{children:["To automatically inject the authorization service into your classes, you can implement the\n",(0,s.jsx)(n.code,{children:"AuthorizationServiceAwareInterface"})," and use the trait, as shown below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace YourModule;\n\nuse LmcRbacMvc\\Service\\AuthorizationServiceAwareInterface;\nuse LmcRbacMvc\\Service\\AuthorizationServiceAwareTrait;\n\nclass MyClass implements AuthorizationServiceAwareInterface\n{\n    use AuthorizationServiceAwareTrait;\n\n    public function doSomethingThatRequiresAuth()\n    {\n        if (! $this->getAuthorizationService()->isGranted('deletePost')) {\n            throw new UnauthorizedException('You are not allowed !');\n        }\n\n        return true;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then, register the initializer in your config (it is not registered by default):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class Module\n{\n    // ...\n\n    public function getServiceConfig()\n    {\n        return [\n            'initializers' => [\n                'LmcRbacMvc\\Initializer\\AuthorizationServiceInitializer'\n            ]\n        ];\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"While initializers allow rapid prototyping, their use can lead to more fragile code. We'd suggest using factories."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"using-delegator-factory",children:"Using delegator factory"}),"\n",(0,s.jsxs)(n.p,{children:["LmcRbacMvc is shipped with a ",(0,s.jsx)(n.code,{children:"LmcRbacMvc\\Factory\\AuthorizationServiceDelegatorFactory"})," ",(0,s.jsx)(n.a,{href:"https://docs.laminas.dev/laminas-servicemanager/delegators/",children:"delegator factory"}),"\nto automatically inject the authorization service into your classes."]}),"\n",(0,s.jsxs)(n.p,{children:["As for the initializer, the class must implement the ",(0,s.jsx)(n.code,{children:"AuthorizationServiceAwareInterface"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"You just have to add your classes to the right delegator :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class Module\n{\n    // ...\n\n    public function getServiceConfig()\n    {\n        return [\n            'invokables' => [\n                'Application\\Service\\MyClass' => 'Application\\Service\\MyClassService',\n            ],\n            'delegators' => [\n                'Application\\Service\\MyClass' => [\n                     'LmcRbacMvc\\Factory\\AuthorizationServiceDelegatorFactory',\n                     // eventually add more delegators here\n                ],\n            ],\n        ];\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"While they need a little more configuration, delegator factories have better performances than initializers."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"using-factories",children:"Using Factories"}),"\n",(0,s.jsxs)(n.p,{children:["You can inject the AuthorizationService into your factories by using Laminas' ServiceManager. The AuthorizationService\nis known to the ServiceManager as ",(0,s.jsx)(n.code,{children:"'LmcRbacMvc\\Service\\AuthorizationService'"}),". Here is a classic example for injecting\nthe AuthorizationService:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"YourModule/Module.php"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class Module\n{\n    // getAutoloaderConfig(), etc...\n\n    public function getServiceConfig()\n    {\n        return [\n            'factories' => [\n                 'MyService' => function($sm) {\n                     $authService = $sm->get('LmcRbacMvc\\Service\\AuthorizationService');\n                     return new MyService($authService);\n                 }\n            ]\n        ];\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"permissions-and-assertions",children:"Permissions and Assertions"}),"\n",(0,s.jsx)(n.p,{children:"Since you now know how to inject the AuthorizationService, let's use it!"}),"\n",(0,s.jsxs)(n.p,{children:["One of the great things the AuthorizationService brings are ",(0,s.jsx)(n.strong,{children:"assertions"}),". Assertions get executed ",(0,s.jsx)(n.em,{children:"if the identity\nin fact holds the permission you are requesting"}),". A common example is a blog post, which only the author can edit. In\nthis case, you have a ",(0,s.jsx)(n.code,{children:"post.edit"})," permission and run an assertion checking the author afterwards."]}),"\n",(0,s.jsx)(n.h3,{id:"defining-assertions",children:"Defining assertions"}),"\n",(0,s.jsxs)(n.p,{children:["The AssertionPluginManager is a great way for you to use assertions and IOC. You can add new assertions quite easily\nby adding this to your ",(0,s.jsx)(n.code,{children:"module.config.php"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'assertion_manager' => [\n            'factories' => [\n                'MyAssertion' => 'MyAssertionFactory'\n            ]\n        ]\n    ]\n];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defining-the-assertion-map",children:"Defining the assertion map"}),"\n",(0,s.jsxs)(n.p,{children:["The assertion map can automatically map permissions to assertions. This means that every time you check for a\npermission with an assertion map, you'll include the assertion in your check. You can define the assertion map by\nadding this to your ",(0,s.jsx)(n.code,{children:"module.config.php"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'assertion_map' => [\n            'myPermission' => 'myAssertion'\n        ]\n    ]\n];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, every time you check for ",(0,s.jsx)(n.code,{children:"myPermission"}),", ",(0,s.jsx)(n.code,{children:"myAssertion"})," will be checked as well."]}),"\n",(0,s.jsx)(n.h3,{id:"checking-permissions-in-a-service",children:"Checking permissions in a service"}),"\n",(0,s.jsx)(n.p,{children:"So let's check for a permission, shall we?"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$authorizationService->isGranted('myPermission');\n"})}),"\n",(0,s.jsx)(n.p,{children:"That was easy, wasn't it?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"isGranted"})," checks if the current identity is granted the permission and additionally runs the assertion that is\nprovided by the assertion map."]}),"\n",(0,s.jsx)(n.h3,{id:"checking-permissions-in-controllers-and-views",children:"Checking permissions in controllers and views"}),"\n",(0,s.jsx)(n.p,{children:"LmcRbacMvc comes with both a controller plugin and a view helper to check permissions."}),"\n",(0,s.jsx)(n.h4,{id:"in-a-controller-",children:"In a controller :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"    public function doSomethingAction()\n    {\n        if (!$this->isGranted('myPermission')) {\n            // redirect if not granted for example\n        }\n    }\n"})}),"\n",(0,s.jsx)(n.h4,{id:"in-a-view-",children:"In a view :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"    <?php if ($this->isGranted('myPermission')): ?>\n    <div>\n        <p>Display only if granted</p>\n    </div>\n    <?php endif ?>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defining-additional-permissions",children:"Defining additional permissions"}),"\n",(0,s.jsx)(n.p,{children:"But what if you don't want to use the assertion map? That's quite easy as well!"}),"\n",(0,s.jsx)(n.p,{children:"Here are four examples of how to run an assertion without using the assertion map:"}),"\n",(0,s.jsx)(n.p,{children:"Disable the assertion:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$authorizationService->setAssertion('myPermission', null);\n$authorizationService->isGranted('myPermission');\n"})}),"\n",(0,s.jsx)(n.p,{children:"Callback assertion:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$something = true;\n\n$authorizationService->setAssertion(\n   'myPermission',\n   function(AuthorizationService $authorization, $context = true) use ($something) {\n      return $something === $context\n   }\n);\n\n$authorizationService->isGranted('myPermission'); // returns true, when the identity holds the permission `myPermission`\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Object implementing ",(0,s.jsx)(n.code,{children:"AssertionInterface"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$context = true;\n\n$authorizationService->setAssertion('myPermission', new MyAssertion($foo, $bar));\n$authorizationService->isGranted('myPermission', $context);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Using the AssertionPluginManager:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$context = true;\n$authorizationService->setAssertion('myPermission', 'MyAssertion');\n$authorizationService->isGranted('myPermission', $context);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Please note: The context parameter is optional!"})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);