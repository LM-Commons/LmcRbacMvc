<?php
/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license.
 */


use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Laminas\Permissions\Rbac\RoleInterface;
use Doctrine\ORM\Mapping as ORM;

/**
 * There is no specific implementation of a flot role.
 * A flot role is a simple utilization of the Laminas\Permission\Rbac\Role without children
 */


/**
 * @ORM\Entity
 * @ORM\Table(name="flat_roles")
 */
class FlatRole implements RoleInterface
{
    /**
     * @var int|null
     *
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue
     */
    private ?int $id;

    /**
     * @var string|null
     * @ORM\Column(type="string", length=32, unique=true)
     */
    protected ?string $name;

    /**
     * @var Collection
     * @ORM\ManyToMany(targetEntity="Permission", indexBy="name", cascade={"persist"}, fetch="EAGER")
     */
    protected Collection $permissions;

    /**
     * Init the Doctrine collection
     */
    public function __construct($name)
    {
        $this->name        = (string) $name;
        $this->permissions = new ArrayCollection();
    }

    /**
     * Get the role identifier
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Add a permission
     *
     * @param string $name
     * @return void
     */
    public function addPermission(string $name):void
    {
        $permission = new \LmcRbacMvcTest\Asset\Permission($name);

        $this->permissions[$name] = $permission;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function hasPermission(string $name): bool
    {
        return isset($this->permissions[$name]);
    }

    public function addChild(RoleInterface $child): void
    {
        // Do nothing
    }

    public function getChildren(): iterable
    {
        return [];
    }

    public function addParent(RoleInterface $parent): void
    {
        // Do nothing
    }

    public function getParents(): iterable
    {
        return [];
    }
}
